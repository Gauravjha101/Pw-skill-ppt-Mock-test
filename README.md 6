Certainly! Here's an example of how you can fetch data from the JSONPlaceholder API and display it in the browser with a skeleton loader:

HTML:

<!DOCTYPE html>
<html>
<head>
  <title>Data Fetching Example</title>
  <style>
    .skeleton-loader {
      display: inline-block;
      width: 200px;
      height: 20px;
      background-color: lightgray;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>
  <h1>Data Fetching Example</h1>

  <div id="dataContainer"></div>

  <script src="script.js"></script>
</body>
</html>
JavaScript (script.js):

javascript:

document.addEventListener('DOMContentLoaded', function() {
  const dataContainer = document.getElementById('dataContainer');

  // Display skeleton loader
  const showSkeletonLoader = () => {
    for (let i = 0; i < 5; i++) {
      const skeletonLoader = document.createElement('div');
      skeletonLoader.classList.add('skeleton-loader');
      dataContainer.appendChild(skeletonLoader);
    }
  };

  // Fetch data from JSONPlaceholder API
  const fetchData = () => {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(response => response.json())
      .then(data => {
        // Remove skeleton loader
        dataContainer.innerHTML = '';

        // Display fetched data
        data.forEach(item => {
          const post = document.createElement('div');
          post.textContent = item.title;
          dataContainer.appendChild(post);
        });
      })
      .catch(error => {
        console.log('Error fetching data:', error);
      });
  };

  // Show skeleton loader and fetch data
  showSkeletonLoader();
  fetchData();
});
In this example, we start with a simple HTML structure. We have a container div (<div id="dataContainer">) where we will display the fetched data.

In the JavaScript code, we define a function called showSkeletonLoader that creates and appends five div elements with the class name "skeleton-loader" to the data container. These divs represent the skeleton loader, providing a visual indication that the data is being fetched.

Next, we define the fetchData function to make a GET request to the JSONPlaceholder API using the fetch function. The response is converted to JSON format using the response.json() method. In the success callback, we remove the skeleton loader by clearing the dataContainer using innerHTML = '', and then we iterate over the fetched data and create a new div for each item, setting its text content to the item's title.

If there is an error while fetching the data, it will be caught in the catch block, and an error message will be logged to the console.

Lastly, we call showSkeletonLoader to display the skeleton loader and then call fetchData to initiate the data fetching process.

When you open this HTML file in a web browser, you will see the skeleton loader being displayed initially. Once the data is fetched successfully, the skeleton loader will be replaced with the fetched data.
