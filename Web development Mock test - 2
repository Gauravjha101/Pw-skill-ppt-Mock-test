ðŸ’¡  Q1  DOM Manipulation: Create a page with a square box of size 300x300 on the page which will be red initially, upon clicking the red box it should change the color to yellow and the size should be doubled

ANS:- Sure! Here's an example of how you can achieve that using JavaScript and CSS:

HTML:
<!DOCTYPE html>
<html>
<head>
  <title>DOM Manipulation Example</title>
  <style>
    .box {
      width: 300px;
      height: 300px;
      background-color: red;
    }
  </style>
</head>
<body>
  <div class="box"></div>

  <script src="script.js"></script>
</body>
</html>
JavaScript (script.js):

document.addEventListener('DOMContentLoaded', function() {
  const box = document.querySelector('.box');

  box.addEventListener('click', function() {
    box.style.backgroundColor = 'yellow';
    box.style.width = '600px';
    box.style.height = '600px';
  });
});
In this example, we start by defining a box element with a class name of "box" in the HTML. The CSS styles the box with a red background and a size of 300x300 pixels.

In the JavaScript code, we use the querySelector method to select the box element and assign it to the box variable. We then attach a click event listener to the box using the addEventListener method. When the box is clicked, the event listener function is triggered. Inside the function, we change the background color to yellow using the style.backgroundColor property, and we double the width and height of the box by setting the style.width and style.height properties to '600px'.

When you open this HTML file in a web browser and click the red box, it will change its color to yellow and double its size to 600x600 pixels.

ðŸ’¡  Q2  Create a app where you have an input box and whenever a user types something in the input box and hits submit it should be added on the webpage below the input box

ANS:-Sure! Here's an example of how you can create an app with an input box that adds the user's input to the webpage:

HTML:

<!DOCTYPE html>
<html>
<head>
  <title>Input Box App</title>
</head>
<body>
  <h1>Input Box App</h1>

  <input type="text" id="textInput" placeholder="Enter text">
  <button id="submitButton">Submit</button>

  <ul id="outputList"></ul>

  <script src="script.js"></script>
</body>
</html>
JavaScript (script.js):

document.addEventListener('DOMContentLoaded', function() {
  const textInput = document.getElementById('textInput');
  const submitButton = document.getElementById('submitButton');
  const outputList = document.getElementById('outputList');

  submitButton.addEventListener('click', function() {
    const text = textInput.value;
    if (text.trim() !== '') {
      const listItem = document.createElement('li');
      listItem.textContent = text;
      outputList.appendChild(listItem);
      textInput.value = '';
    }
});
});

In this example, we have an input box (<input type="text">) where the user can enter some text, and a submit button (<button>) to trigger the addition of the input text to the webpage.

In the JavaScript code, we use the getElementById method to select the input box, submit button, and the unordered list (<ul>) where we will add the user's input. We then attach a click event listener to the submit button using the addEventListener method. When the button is clicked, the event listener function is triggered.

Inside the event listener function, we retrieve the value of the text input using the value property of the textInput element. We check if the trimmed value is not empty to prevent adding empty items to the list. If the text is not empty, we create a new list item (<li>) using the createElement method, set its text content to the input text, and append it to the outputList element using the appendChild method. Finally, we clear the input box by setting its value to an empty string (textInput.value = '').

When you open this HTML file in a web browser, you can enter some text in the input box and click the submit button to add the text as a new item in the unordered list below the input box.

ðŸ’¡  Q3  Fetch data from the JSON placeholder API and display it in the browser. Also, implement the skeleton loader which will be displayed when the data is getting fetched. (No library should be used for implementing the skeleton loader)

ANS:- Certainly! Here's an example of how you can fetch data from the JSONPlaceholder API and display it in the browser with a skeleton loader:

HTML:

<!DOCTYPE html>
<html>
<head>
  <title>Data Fetching Example</title>
  <style>
    .skeleton-loader {
      display: inline-block;
      width: 200px;
      height: 20px;
      background-color: lightgray;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>
  <h1>Data Fetching Example</h1>

  <div id="dataContainer"></div>

  <script src="script.js"></script>
</body>
</html>

JavaScript (script.js):

document.addEventListener('DOMContentLoaded', function() {
  const dataContainer = document.getElementById('dataContainer');

  // Display skeleton loader
  const showSkeletonLoader = () => {
    for (let i = 0; i < 5; i++) {
      const skeletonLoader = document.createElement('div');
      skeletonLoader.classList.add('skeleton-loader');
      dataContainer.appendChild(skeletonLoader);
    }
  };

  // Fetch data from JSONPlaceholder API
  const fetchData = () => {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(response => response.json())
      .then(data => {
        // Remove skeleton loader
        dataContainer.innerHTML = '';

        // Display fetched data
        data.forEach(item => {
          const post = document.createElement('div');
          post.textContent = item.title;
          dataContainer.appendChild(post);
        });
      })
      .catch(error => {
        console.log('Error fetching data:', error);
      });
  };

  // Show skeleton loader and fetch data
  showSkeletonLoader();
  fetchData();
});
In this example, we start with a simple HTML structure. We have a container div (<div id="dataContainer">) where we will display the fetched data.

In the JavaScript code, we define a function called showSkeletonLoader that creates and appends five div elements with the class name "skeleton-loader" to the data container. These divs represent the skeleton loader, providing a visual indication that the data is being fetched.

Next, we define the fetchData function to make a GET request to the JSONPlaceholder API using the fetch function. The response is converted to JSON format using the response.json() method. In the success callback, we remove the skeleton loader by clearing the dataContainer using innerHTML = '', and then we iterate over the fetched data and create a new div for each item, setting its text content to the item's title.

If there is an error while fetching the data, it will be caught in the catch block, and an error message will be logged to the console.

Lastly, we call showSkeletonLoader to display the skeleton loader and then call fetchData to initiate the data fetching process.

When you open this HTML file in a web browser, you will see the skeleton loader being displayed initially. Once the data is fetched successfully, the skeleton loader will be replaced with the fetched data.

ðŸ’¡  Q4 Build a responsive Navbar, on smaller screens it should be a hamburger menu which on click should reveal the menu items nicely, and on larger screens they should be displayed directly on the screen.

ANS:-Sure! I can help you with that. Here's an example of a responsive navbar using HTML, CSS, and JavaScript. It will display a hamburger menu on smaller screens and reveal the menu items when clicked, while on larger screens, the menu items will be displayed directly.

HTML:

<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <nav class="navbar">
    <div class="navbar-container">
      <div class="brand">
        <a href="#">Logo</a>
      </div>
      <div class="menu-icon">
        <span class="icon"></span>
      </div>
      <ul class="menu">
        <li><a href="#">Home</a></li>
        <li><a href="#">About</a></li>
        <li><a href="#">Services</a></li>
        <li><a href="#">Contact</a></li>
      </ul>
    </div>
  </nav>

  <script src="script.js"></script>
</body>
</html>

CSS (styles.css):

.navbar {
  background-color: #f8f8f8;
  padding: 10px;
}

.navbar-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.brand a {
  font-weight: bold;
  text-decoration: none;
  color: #333;
}

.menu {
  display: flex;
  justify-content: flex-end;
  margin: 0;
  padding: 0;
  list-style: none;
}

.menu li {
  margin-left: 20px;
}

.menu li a {
  text-decoration: none;
  color: #333;
}

.menu-icon {
  display: none;
  cursor: pointer;
}

.icon {
  display: block;
  width: 25px;
  height: 3px;
  background-color: #333;
  margin-bottom: 5px;
}

@media (max-width: 768px) {
  .menu {
    display: none;
  }

  .menu-icon {
    display: block;
  }

  .responsive {
    display: block;
  }

  .responsive li {
    text-align: center;
    margin-bottom: 15px;
  }
}

JavaScript (script.js):

document.querySelector('.menu-icon').addEventListener('click', function() {
  var menu = document.querySelector('.menu');
  if (menu.style.display === 'flex') {
    menu.style.display = 'none';
  } else {
    menu.style.display = 'flex';
  }
});
This code creates a basic navbar with a logo and menu items. The CSS includes media queries to handle responsive behavior. On smaller screens (max-width: 768px), the menu items are hidden and the hamburger menu icon is displayed. When the icon is clicked, the menu items are toggled between display: none and display: flex.

You can save the HTML, CSS, and JavaScript code in separate files (e.g., index.html, styles.css, script.js) and open the HTML file in a web browser to see the responsive navbar in action. Feel free to modify the styles and content to fit your needs.

ðŸ’¡  Q5  Create a form with proper form validation using JavaScript (name, email, phone number, password, age, gender, date, color picker)


ANS:- Certainly! Here's an example of a form with proper form validation using JavaScript. It includes fields for name, email, phone number, password, age, gender, date, and a color picker.

HTML:

<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <form id="myForm" onsubmit="validateForm(event)">
    <div>
      <label for="name">Name:</label>
      <input type="text" id="name" name="name" required>
    </div>
    <div>
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required>
    </div>
    <div>
      <label for="phone">Phone Number:</label>
      <input type="tel" id="phone" name="phone" required>
    </div>
    <div>
      <label for="password">Password:</label>
      <input type="password" id="password" name="password" required>
    </div>
    <div>
      <label for="age">Age:</label>
      <input type="number" id="age" name="age" min="18" max="99" required>
    </div>
    <div>
      <label for="gender">Gender:</label>
      <select id="gender" name="gender" required>
        <option value="">Select</option>
        <option value="male">Male</option>
        <option value="female">Female</option>
      </select>
    </div>
    <div>
      <label for="date">Date:</label>
      <input type="date" id="date" name="date" required>
    </div>
    <div>
      <label for="color">Color:</label>
      <input type="color" id="color" name="color" required>
    </div>
    <button type="submit">Submit</button>
  </form>

  <script src="script.js"></script>
</body>
</html>

CSS (styles.css):

.error {
  color: red;
}

JavaScript (script.js):

function validateForm(event) {
  event.preventDefault();

  // Reset error messages
  clearErrors();

  // Validate each field
  var nameInput = document.getElementById('name');
  var emailInput = document.getElementById('email');
  var phoneInput = document.getElementById('phone');
  var passwordInput = document.getElementById('password');
  var ageInput = document.getElementById('age');
  var genderInput = document.getElementById('gender');
  var dateInput = document.getElementById('date');
  var colorInput = document.getElementById('color');

  var isValid = true;

  if (!validateName(nameInput.value)) {
    displayError(nameInput, 'Please enter a valid name.');
    isValid = false;
  }

  if (!validateEmail(emailInput.value)) {
    displayError(emailInput, 'Please enter a valid email address.');
    isValid = false;
  }

  if (!validatePhone(phoneInput.value)) {
    displayError(phoneInput, 'Please enter a valid phone number.');
    isValid = false;
  }

  if (!validatePassword(passwordInput.value)) {
    displayError(passwordInput, 'Please enter a valid password (minimum 8 characters).');
    isValid = false;
  }

  if (!validateAge(ageInput.value)) {
    displayError(ageInput, 'Please enter a valid age (between 18 and 99).');
    isValid = false;
  }

  if (!validateGender(genderInput.value)) {
    displayError(genderInput, 'Please select a gender.');
    isValid = false;
  }

  if (!validateDate(dateInput.value)) {
    displayError(dateInput, 'Please enter a valid date.');
    isValid = false;
  }

  if (!validateColor(colorInput.value)) {
    displayError(colorInput, 'Please select a valid color.');
    isValid = false;
  }

  if (isValid) {
    // Form is valid, you can submit the form here or perform additional actions
    alert('Form submitted successfully!');
    document.getElementById('myForm').reset(); // Reset the form after submission
  }
}

function validateName(name) {
  // Basic name validation (non-empty)
  return name.trim() !== '';
}

function validateEmail(email) {
  // Email validation using a regular expression
  var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailPattern.test(email);
}

function validatePhone(phone) {
  // Phone number validation using a regular expression
  var phonePattern = /^\d{10}$/;
  return phonePattern.test(phone);
}

function validatePassword(password) {
  // Password validation (minimum 8 characters)
  return password.length >= 8;
}

function validateAge(age) {
  // Age validation (between 18 and 99)
  var ageNumber = parseInt(age, 10);
  return ageNumber >= 18 && ageNumber <= 99;
}

function validateGender(gender) {
  // Gender validation (non-empty)
  return gender.trim() !== '';
}

function validateDate(date) {
  // Date validation (non-empty)
  return date.trim() !== '';
}

function validateColor(color) {
  // Color validation (non-empty)
  return color.trim() !== '';
}

function displayError(inputElement, message) {
  // Display the error message below the input field
  var errorElement = document.createElement('div');
  errorElement.className = 'error';
  errorElement.innerText = message;
  inputElement.parentNode.insertBefore(errorElement, inputElement.nextSibling);
}

function clearErrors() {
  // Remove all error messages
  var errorElements = document.getElementsByClassName('error');
  while (errorElements.length > 0) {
    errorElements[0].parentNode.removeChild(errorElements[0]);
  }
}
This code creates a form with various input fields and performs validation on each field when the form is submitted. The JavaScript code includes functions to validate the name, email, phone number, password, age, gender, date, and color fields. Error messages are displayed for invalid inputs, and the form is reset after successful submission.

Save the HTML, CSS, and JavaScript code in separate files (e.g., index.html, styles.css, script.js), and open the HTML file in a web browser to see the form with validation in action. Feel free to modify the styles and validation rules to suit your needs.

ðŸ’¡  Q6   Create a custom modal window using HTML, CSS, and JavaScript. On clicking a button the modal window should appear and the user can click outside the modal window to close the modal along with a close button which is inside the modal. Also when the modal is open the window should not be scrollable.

ANS:-  Certainly! Here's an example of a custom modal window using HTML, CSS, and JavaScript. It includes a button to open the modal, the ability to close the modal by clicking outside or using a close button, and the disabling of scrolling when the modal is open.

HTML:

<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <button id="openModalBtn">Open Modal</button>

  <div id="myModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Modal Title</h2>
      <p>This is the modal content.</p>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>

CSS (styles.css):

.modal {
  display: none;
  position: fixed;
  z-index: 9999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.6);
}

.modal-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 500px;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}

body.modal-open {
  overflow: hidden;
}

JavaScript (script.js):

var openModalBtn = document.getElementById('openModalBtn');
var modal = document.getElementById('myModal');
var closeModalBtn = modal.getElementsByClassName('close')[0];

openModalBtn.addEventListener('click', function() {
  modal.style.display = 'block';
  document.body.classList.add('modal-open');
});

closeModalBtn.addEventListener('click', function() {
  modal.style.display = 'none';
  document.body.classList.remove('modal-open');
});

window.addEventListener('click', function(event) {
  if (event.target === modal) {
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
  }
});
This code creates a custom modal window. The CSS sets the styles for the modal and its content, including the close button. The JavaScript code handles the opening and closing of the modal. When the "Open Modal" button is clicked, the modal is displayed and the body of the document gets the class "modal-open" to disable scrolling. Clicking on the close button or outside the modal window closes the modal and removes the "modal-open" class to enable scrolling.

Save the HTML, CSS, and JavaScript code in separate files (e.g., index.html, styles.css, script.js), and open the HTML file in a web browser to see the custom modal window in action. Feel free to modify the styles and content of the modal to fit your needs.
